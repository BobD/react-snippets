{
	"Import React": {
		"prefix": "imr",
		"body": [
			"import React from 'react'"
		],
		"description": "Import React"
	},
	"ClassNames": {
		"prefix": "cn",
		"body": [
			"import classNames from 'classnames'"
		],
		"description": "Imports classNames"
	},
	"Functional Component": {
		"prefix": "fc",
		"body": [
			"import React from 'react'",
			"",
			"class ${1} extends React.Component {",
			"\trender () {",
			"\t\treturn (",
			"\t\t\t<p>Test</p>",
			"\t\t)",
			"\t}",
			"}",
			"",
			"export default ${1}",
			""
		],
		"description": "A functional component"
	},
	"Stateless Functional Component": {
		"prefix": "sfc",
		"body": [
			"import React from 'react'",
			"",
			"const ${1} = () => {",
			"\treturn (",
			"\t\t<p>Test</p>",
			"\t)",
			"}",
			"",
			"export default ${1}",
			""
		],
		"description": "A staleless functional component"
	},
	"Constructor": {
		"prefix": "ctor",
		"body": [
			"constructor (props) {",
			"\tsuper(props)",
			"}"
		],
		"description": "Add a constructor to your component"
	},
	"Bind Method": {
		"prefix": "bm",
		"body": [
			"this.${1} = this.${1}.bind(this)"
		],
		"description": "Bind a method to 'this' in your constructor"
	},
	"Set State": {
		"prefix": "ss",
		"body": [
			"this.setState({",
			"\t${1}: ${2}",
			"})"
		],
		"description": "Update the state of your component"
	},
	"componentDidMount": {
		"prefix": "cdm",
		"body": [
			"componentDidMount () {",
			"\t",
			"}"
		],
		"description": "componentDidMount() is invoked immediately after a component is mounted (inserted into the tree)"
	},
	"componentDidUpdate": {
		"prefix": "cdu",
		"body": [
			"componentDidUpdate (prevProps, prevState, snapshot) {",
			"\t",
			"}"
		],
		"description": "componentDidUpdate() is invoked immediately after updating occurs. This method is not called for the initial render"
	},
	"componentWillUnmount": {
		"prefix": "cwu",
		"body": [
			"componentWillUnmount () {",
			"\t",
			"}"
		],
		"description": "componentWillUnmount() is invoked immediately before a component is unmounted and destroyed"
	},
	"shouldComponentUpdate": {
		"prefix": "scu",
		"body": [
			"shouldComponentUpdate (nextProps, nextState) {",
			"\t",
			"}"
		],
		"description": "Use shouldComponentUpdate() to let React know if a componentâ€™s output is not affected by the current change in state or props"
	},
	"getDerivedStateFromProps": {
		"prefix": "sfp",
		"body": [
			"static getDerivedStateFromProps (props, state) {",
			"\t",
			"}"
		],
		"description": "getDerivedStateFromProps is invoked right before calling the render method, both on the initial mount and on subsequent updates"
	},
	"getSnapshotBeforeUpdate": {
		"prefix": "sbu",
		"body": [
			"getSnapshotBeforeUpdate (prevProps, prevState) {",
			"\t",
			"}"
		],
		"description": "getSnapshotBeforeUpdate() is invoked right before the most recently rendered output is committed to e.g. the DOM"
	},
	"componentDidCatch": {
		"prefix": "cdc",
		"body": [
			"componentDidCatch (error, info) {",
			"\t",
			"}"
		],
		"description": "Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed"
	},
	"Stateless Functional Component With Styles": {
		"prefix": "sfcs",
		"body": [
			"import React from 'react'",
			"import { withStyles } from '@material-ui/core/styles'",
			"import styles from './styles'",
			"",
			"const ${1} = () => {",
			"\treturn (",
			"\t\t<p>Test</p>",
			"\t)",
			"}",
			"",
			"export default withStyles(styles)(${1})",
			""
		],
		"description": "A staleless functional component with MUI styles"
	},
	"Functional Component With Styles": {
		"prefix": "fcs",
		"body": [
			"import React from 'react'",
			"import { withStyles } from '@material-ui/core/styles'",
			"import styles from './styles'",
			"",
			"class ${1} extends React.Component {",
			"\trender () {",
			"\t\treturn (",
			"\t\t\t<p>Test</p>",
			"\t\t)",
			"\t}",
			"}",
			"",
			"export default withStyles(styles)(${1})",
			""
		],
		"description": "A functional component with MUI styles"
	},
	"Mui Style": {
		"prefix": "sty",
		"body": [
			"const styles = theme => ({",
			"",
			"})",
			"",
			"export default styles",
			""
		],
		"description": "Mui Style template"
	},
	"Stateless Functional Styled Component": {
		"scope": "javascript,typescript",
		"prefix": "ssfc",
		"body": [
			"import React from 'react'",
			"import PropTypes from 'prop-types'",
			"import styled from 'styled-components'",
			"",
			"const $1 = ({ title }) => {",
			"\treturn (",
			"\t\t<Container>{title}</Container>",
			"\t)",
			"}",
			"",
			"$1.propTypes = {",
			"\t/** this is just an exmaple of how to do it */",
			"\ttitle: PropTypes.string",
			"}",
			"",
			"export default $1",
			"",
			"const Container = styled.div`",
			"\ttext-align: center;",
			"`",
			""
		],
		"description": "a stateless functional styled component"
	},
	"React Native Stateless Functional Styled Component": {
		"scope": "javascript,typescript",
		"prefix": "ssfcn",
		"body": [
			"import React from 'react'",
			"import PropTypes from 'prop-types'",
			"import styled from 'styled-components/native'",
			"import { Text } from 'react-native'",
			"",
			"const $1 = () => {",
			"\treturn (",
			"\t\t<Text>Test</Text>",
			"\t)",
			"}",
			"",
			"$1.propTypes = {",
			"",
			"}",
			"",
			"export default $1",
			""
		],
		"description": "a RN stateless functional styled component"
	},
	"Story": {
		"prefix": "st",
		"body": [
			"import React from 'react'",
			"import StoryRouter from 'storybook-router'",
			"/* THEME */",
			"import ThemeDecorator from './themes/default'",
			"",
			"/* STORYBOOK  */",
			"import { storiesOf, action } from '@storybook/react'",
			"",
			"storiesOf('${1}', module)",
			"\t.add('${2}', () => (",
			"\t\t<p>Test</p>",
			"\t))",
			""
		],
		"description": "React Storybook Story"
	}
}